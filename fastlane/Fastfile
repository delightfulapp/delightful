# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.97.2"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # cocoapods

  end

  desc "Create demo server"
  lane :demo_server do
    decrypt
    UI.message "Creating droplet ..."
    droplet = create_droplet
    UI.message "Droplet #{droplet['ip']} created. Sleep for 1 minutes ..."
    sleep(1.minute)
    UI.message "Uploading install script ..."
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/install-trovebox-demo.sh root@"+droplet['ip']+":~"
    UI.message "Executing install script ..."
    sh "cd .. && ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@"+droplet['ip']+" './install-trovebox-demo.sh'"
    UI.message "Uploading openphoto.conf ..."
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/trovebox-demo.conf root@"+droplet['ip']+":/etc/apache2/sites-available/openphoto.conf"
    UI.message "Uploading trovebox-demo.ini ..."
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/trovebox-demo.ini root@"+droplet['ip']+":~/"+droplet['ip']+".ini"
    UI.message "Editing trovebox-demo.ini ..."
    sh "cd .. && ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@"+droplet['ip']+" 'mkdir /var/www/openphoto/src/userdata/configs && cp ~/"+droplet['ip']+".ini"+" /var/www/openphoto/src/userdata/configs/ && chown www-data:www-data /var/www/openphoto/src/userdata/configs && chown www-data:www-data /var/www/openphoto/src/userdata/configs/"+droplet['ip']+".ini"+" && sed -e \"s|IP_ADDRESS|"+droplet['ip']+"|g\" ~/"+droplet['ip']+".ini"+" > /var/www/openphoto/src/userdata/configs/"+droplet['ip']+".ini"+"'"
    UI.message "Uploading trovebox.sql ..."
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/trovebox.sql root@"+droplet['ip']+":~"
    UI.message "Importing trovebox.sql ..."
    sh "cd .. && ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@"+droplet['ip']+" 'mysql -uroot trovebox < ~/trovebox.sql'"
    sh "cd .. && ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@"+droplet['ip']+" 'service apache2 reload'"
    UI.message "Uploading demo photos ..."
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/OpenPhotoOAuth.php root@"+droplet['ip']+":~"
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/OAuthSimple.php root@"+droplet['ip']+":~"
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/openphoto root@"+droplet['ip']+":~"
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/Photos-Demo.zip root@"+droplet['ip']+":~"
    sh "cd .. && scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ./server/import-photos.sh root@"+droplet['ip']+":~"
    UI.message "Importing demo photos ..."
    sh "cd .. && ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@"+droplet['ip']+" './import-photos.sh'"
    clean_decrypt
    UI.message "Trovebox demo server is ready at #{droplet['ip']}"
  end

  desc "Runs all the tests"
  lane :test do
    scan(
      scheme: 'Delightful',
      workspace: 'Delightful.xcworkspace',
      device: 'iPhone 6',
      clean: true,
      output_directory: 'build'
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    decrypt
    fabric_key = Helper.backticks('cd .. && cat ./fabric_api_key')
    match(type: "appstore") # more information: https://codesigning.guide
    update_info_plist(
      xcodeproj: "./Delightful.xcodeproj",
      plist_path: "./PhotoBox/Delightful-Info.plist",
      block: lambda { |plist|
        plist["Fabric"]["APIKey"] = fabric_key
      }
    )
    increment_build_number
    increment_version_number
    gym(
      workspace: 'Delightful.xcworkspace',
      scheme: "Delightful",
      clean: true,
      output_directory: 'build'
    ) # Build your app - more options available
    pilot(
      skip_waiting_for_build_processing: true,
      team_id: "320144"
    )
    clean_decrypt
    update_info_plist(
      xcodeproj: "./Delightful.xcodeproj",
      plist_path: "./PhotoBox/Delightful-Info.plist",
      block: lambda { |plist|
        plist["Fabric"]["APIKey"] = ""
      }
    )
    commit_version_bump(
      xcodeproj: './Delightful.xcodeproj',
      force: true
    )
    add_git_tag
    push_to_git_remote
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "Delightful") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  desc "Decrypt files"
  private_lane :decrypt do
    sh "blackbox_edit_start Appfile.gpg && blackbox_edit_start Deliverfile.gpg && blackbox_edit_start Matchfile.gpg"
    sh "cd .. && blackbox_edit_start fabric_api_key.gpg"
    sh "cd .. && blackbox_edit_start d_o_key.gpg"
  end

  desc "Clean Decrypted Files"
  private_lane :clean_decrypt do
    sh "rm Appfile && rm Deliverfile && rm Matchfile"
    sh "cd .. && rm fabric_api_key"
    sh "cd .. && rm d_o_key"
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
